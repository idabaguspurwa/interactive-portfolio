name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: read

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing and Quality Gates
  frontend-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci || npm install
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests with coverage
      run: npm run test -- --coverage --watchAll=false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
    
    - name: Build application
      run: npm run build
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Cache build artifacts
      uses: actions/cache@v3
      if: matrix.node-version == '20.x'
      with:
        path: |
          .next
          node_modules
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: frontend-test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance and SEO Quality Assessment
  lighthouse-seo:
    runs-on: ubuntu-latest
    needs: frontend-test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore build cache
      uses: actions/cache@v3
      with:
        path: |
          .next
          node_modules
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
    
    - name: Install dependencies (if cache miss)
      run: npm ci || npm install
    
    - name: Build application
      run: npm run build
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Serve and test with Lighthouse
      run: |
        npm start &
        sleep 15
        # Run comprehensive Lighthouse audits for multiple pages
        npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-home.json --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" --only-categories=performance,accessibility,best-practices,seo
        npx lighthouse http://localhost:3000/about --output=json --output-path=./lighthouse-about.json --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" --only-categories=performance,accessibility,best-practices,seo
        npx lighthouse http://localhost:3000/projects --output=json --output-path=./lighthouse-projects.json --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" --only-categories=performance,accessibility,best-practices,seo
        npx lighthouse http://localhost:3000/ai-explorer --output=json --output-path=./lighthouse-ai-explorer.json --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" --only-categories=performance,accessibility,best-practices,seo
        # Generate HTML reports
        npx lighthouse http://localhost:3000 --output=html --output-path=./lighthouse-report.html --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"
    
    - name: SEO Validation
      run: |
        # Check sitemap accessibility
        curl -f http://localhost:3000/sitemap.xml -o sitemap-check.xml
        echo "‚úÖ Sitemap is accessible"
        
        # Check robots.txt
        curl -f http://localhost:3000/robots.txt -o robots-check.txt
        echo "‚úÖ Robots.txt is accessible"
        
        # Validate sitemap XML structure
        xmllint --noout sitemap-check.xml && echo "‚úÖ Sitemap XML is valid" || echo "‚ùå Sitemap XML is invalid"
    
    - name: Check Lighthouse SEO Score
      run: |
        # Extract SEO scores and fail if below threshold
        HOME_SEO=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./lighthouse-home.json')).categories.seo.score * 100)")
        ABOUT_SEO=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./lighthouse-about.json')).categories.seo.score * 100)")
        echo "üè† Home SEO Score: $HOME_SEO"
        echo "üë§ About SEO Score: $ABOUT_SEO"
        
        # Fail if SEO score is below 90
        if (( $(echo "$HOME_SEO < 90" | bc -l) )); then
          echo "‚ùå Home page SEO score ($HOME_SEO) is below 90"
          exit 1
        fi
        if (( $(echo "$ABOUT_SEO < 90" | bc -l) )); then
          echo "‚ùå About page SEO score ($ABOUT_SEO) is below 90"
          exit 1
        fi
        echo "‚úÖ All SEO scores are above 90"
    
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-seo-results
        path: |
          lighthouse-*.json
          lighthouse-report.html
          sitemap-check.xml
          robots-check.txt
        retention-days: 30

  # Backend Deployment to Fly.io
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./python-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for backend changes
      uses: dorny/paths-filter@v2
      id: backend-changes
      with:
        filters: |
          backend:
            - 'python-backend/**'
    
    - name: Setup Fly.io CLI
      if: steps.backend-changes.outputs.backend == 'true'
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Deploy to Fly.io
      if: steps.backend-changes.outputs.backend == 'true'
      run: flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    - name: Health check
      if: steps.backend-changes.outputs.backend == 'true'
      run: |
        sleep 30
        curl -f https://events-backend.fly.dev/ || exit 1
    
    - name: Skip deployment message
      if: steps.backend-changes.outputs.backend != 'true'
      run: |
        echo "‚è≠Ô∏è No changes detected in python-backend/ folder - skipping deployment"

  # Dependency Management
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
