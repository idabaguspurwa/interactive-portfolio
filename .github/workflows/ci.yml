name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  security-events: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing and Quality Gates
  frontend-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci || npm install
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests with coverage
      run: npm run test -- --coverage --watchAll=false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
    
    - name: Build application
      run: npm run build
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Cache build artifacts
      uses: actions/cache@v3
      if: matrix.node-version == '20.x'
      with:
        path: |
          .next
          node_modules
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: frontend-test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance and Quality Assessment
  lighthouse:
    runs-on: ubuntu-latest
    needs: frontend-test
    if: github.event_name == 'pull_request'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore build cache
      uses: actions/cache@v3
      with:
        path: |
          .next
          node_modules
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
    
    - name: Install dependencies (if cache miss)
      run: npm ci || npm install
    
    - name: Build application
      run: npm run build
    
    - name: Serve and test with Lighthouse
      run: |
        npm start &
        sleep 15
        npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-results.json --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"
        npx lighthouse http://localhost:3000 --output=html --output-path=./lighthouse-report.html --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"
    
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results
        path: |
          lighthouse-results.json
          lighthouse-report.html
        retention-days: 30

  # Frontend Deployment
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
    
    - name: Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'push'
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: 'ðŸš€ Frontend deployed to production!'
          });

  # Backend Deployment to Fly.io
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./python-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Fly.io CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Deploy to Fly.io
      run: flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    - name: Health check
      run: |
        sleep 30
        curl -f https://events-backend.fly.dev/ || exit 1
    
    - name: Notify deployment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: 'ðŸš€ Backend deployed to Fly.io!'
          });

  # Dependency Management
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
