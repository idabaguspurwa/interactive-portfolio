name: Production Monitoring & Health Checks

on:
  schedule:
    - cron: '*/15 * * * *' # Every 15 minutes
  workflow_dispatch:
  deployment_status:

env:
  FRONTEND_URL: 'https://idabaguspurwa.com'
  BACKEND_URL: 'https://events-backend.fly.dev'

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Check Frontend Health
      id: frontend
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.FRONTEND_URL }}" || echo "000")
        if [ "$response" = "200" ]; then
          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "‚úÖ Frontend is healthy (HTTP $response)"
        else
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "‚ùå Frontend is unhealthy (HTTP $response)"
          exit 1
        fi
    
    - name: Check Backend Health
      id: backend
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BACKEND_URL }}" || echo "000")
        if [ "$response" = "200" ]; then
          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "‚úÖ Backend is healthy (HTTP $response)"
        else
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "‚ùå Backend is unhealthy (HTTP $response)"
          exit 1
        fi
    
    - name: Test WebSocket Connection
      id: websocket
      run: |
        # Install wscat for WebSocket testing
        npm install -g wscat
        
        # Test WebSocket connection with timeout
        timeout 10s wscat -c "wss://events-backend.fly.dev/ws/github-events" --execute "ping" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "‚úÖ WebSocket connection is healthy"
        else
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "‚ùå WebSocket connection failed"
          exit 1
        fi
    
    - name: Check SSL Certificates
      run: |
        echo "Checking SSL certificate for frontend..."
        openssl s_client -connect idabaguspurwa.com:443 -servername idabaguspurwa.com < /dev/null 2>/dev/null | openssl x509 -noout -dates
        
        echo "Checking SSL certificate for backend..."
        openssl s_client -connect events-backend.fly.dev:443 -servername events-backend.fly.dev < /dev/null 2>/dev/null | openssl x509 -noout -dates
    
    - name: Performance Check
      run: |
        echo "Testing frontend response time..."
        time_taken=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.FRONTEND_URL }}")
        echo "Frontend response time: ${time_taken}s"
        
        # Alert if response time > 3 seconds
        if (( $(echo "$time_taken > 3" | bc -l) )); then
          echo "‚ö†Ô∏è Frontend response time is slow: ${time_taken}s"
        fi
        
        echo "Testing backend response time..."
        time_taken=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.BACKEND_URL }}")
        echo "Backend response time: ${time_taken}s"
        
        if (( $(echo "$time_taken > 2" | bc -l) )); then
          echo "‚ö†Ô∏è Backend response time is slow: ${time_taken}s"
        fi
    
    outputs:
      frontend_status: ${{ steps.frontend.outputs.status }}
      backend_status: ${{ steps.backend.outputs.status }}
      websocket_status: ${{ steps.websocket.outputs.status }}

  notify-failure:
    runs-on: ubuntu-latest
    needs: health-check
    if: failure()
    
    steps:
    - name: Log Health Check Failure
      run: |
        echo "üö® Production Health Check Failed"
        echo "=================================="
        echo "Time: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "Status Summary:"
        echo "- Frontend (${{ env.FRONTEND_URL }}): ${{ needs.health-check.outputs.frontend_status || 'failed' }}"
        echo "- Backend (${{ env.BACKEND_URL }}): ${{ needs.health-check.outputs.backend_status || 'failed' }}"
        echo "- WebSocket: ${{ needs.health-check.outputs.websocket_status || 'failed' }}"
        echo ""
        echo "Next Steps:"
        echo "1. Check service logs"
        echo "2. Verify deployment status"
        echo "3. Check external dependencies"
        echo "4. Consider rollback if necessary"

  deployment-notification:
    runs-on: ubuntu-latest
    if: github.event_name == 'deployment_status'
    
    steps:
    - name: Log Deployment Status
      run: |
        echo "üîÑ Deployment Status Notification"
        echo "================================"
        echo "Event: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "SHA: ${{ github.sha }}"
        echo "Ref: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"

  uptime-report:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 9 * * 1' # Weekly on Monday at 9 AM UTC
    
    steps:
    - name: Generate Weekly Uptime Report
      run: |
        echo "üìä Weekly Uptime Report"
        echo "======================"
        echo "Period: $(date -d '7 days ago' '+%Y-%m-%d') - $(date '+%Y-%m-%d')"
        echo ""
        echo "Service Status:"
        echo "- üåê Frontend: idabaguspurwa.com"
        echo "- üîß Backend: events-backend.fly.dev"
        echo "- üîå WebSocket: Real-time data streaming"
        echo ""
        echo "Key Metrics:"
        echo "- Monitoring frequency: Every 15 minutes"
        echo "- Total checks this week: ~672 per service"
        echo "- Health check workflow: ${{ github.server_url }}/${{ github.repository }}/actions/workflows/monitoring.yml"
        echo ""
        echo "Notes:"
        echo "- All monitoring is automated via GitHub Actions"
        echo "- Failures are logged in workflow runs"
        echo "- SSL certificates are monitored daily"
        echo ""
        echo "Report generated automatically by GitHub Actions"