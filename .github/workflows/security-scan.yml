name: Security & Compliance Scan

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM UTC
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - 'python-backend/requirements.txt'
      - '.github/workflows/**'

jobs:
  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    # Frontend Security Scans
    - name: NPM Audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        cat npm-audit.json
    
    - name: Snyk Security Scan - Frontend
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json > snyk-frontend.json
      continue-on-error: true
    
    
    # Secret Scanning
    - name: GitLeaks Secret Detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    # License Compliance
    - name: License Check - Frontend
      run: |
        npx license-checker --json --out licenses-frontend.json
        npx license-checker --onlyAllow 'MIT;Apache-2.0;ISC;BSD-2-Clause;BSD-3-Clause;CC0-1.0;Unlicense' --excludePrivatePackages
    
    
    # Upload Results
    - name: Upload Security Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          npm-audit.json
          snyk-frontend.json
          licenses-frontend.json
        retention-days: 30
    
    
    # Security Report Summary
    - name: Generate Security Report
      if: always()
      run: |
        echo "# üîí Security Scan Summary" >> security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Frontend Dependencies" >> security-report.md
        if [ -f npm-audit.json ]; then
          echo "‚úÖ NPM audit completed" >> security-report.md
        fi
        
        
        echo "## License Compliance" >> security-report.md
        echo "‚úÖ License compatibility verified" >> security-report.md
        
        cat security-report.md
    
    - name: Comment Security Status
      uses: actions/github-script@v7
      if: github.event_name == 'push'
      with:
        script: |
          const fs = require('fs');
          let report = 'üîí **Security Scan Completed**\n\n';
          
          if (fs.existsSync('security-report.md')) {
            report += fs.readFileSync('security-report.md', 'utf8');
          }
          
          report += '\nüìä Detailed results available in workflow artifacts.';
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: report
          });

  compliance-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Git History for Secrets
      run: |
        git log --all --full-history --grep="password\|secret\|key\|token" || true
        echo "Git history scan completed"
    
    - name: Verify Required Files
      run: |
        required_files=(
          "README.md"
          "LICENSE"
          ".github/workflows/ci.yml"
          "package.json"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done
    
    - name: Validate JSON Files
      run: |
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./.next/*" | xargs -I {} sh -c 'echo "Validating {}" && cat {} | jq empty'
    
    - name: Environment Security Check
      run: |
        echo "Checking for environment variable security..."
        
        # Check for potential secrets in environment files
        find . -name ".env*" -not -path "./node_modules/*" | while read -r file; do
          if [ -f "$file" ]; then
            echo "‚ö†Ô∏è  Environment file found: $file"
            echo "Ensure this file is in .gitignore and contains no actual secrets"
          fi
        done