name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  create-release:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run full CI pipeline
      run: npm run ci
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Deployment Status
          - ‚úÖ Frontend: Automatically deployed to Vercel
          - ‚úÖ Backend: Automatically deployed to Fly.io
          
          ## Performance & Quality
          - Lighthouse performance audit completed
          - Security scan passed
          - Test coverage reports available
        draft: false
        prerelease: false
    
    - name: Tag deployment
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "deployed-${{ github.ref_name }}" -m "Deployment tag for ${{ github.ref_name }}"
        git push origin "deployed-${{ github.ref_name }}"

  deploy-production:
    runs-on: ubuntu-latest
    needs: create-release
    environment: production
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy Frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        alias-domains: |
          idabaguspurwa.com
    
    - name: Deploy Backend to Fly.io
      run: |
        cd python-backend
        flyctl deploy --remote-only --strategy=immediate
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    - name: Post-deployment health checks
      run: |
        echo "Checking frontend..."
        curl -f https://idabaguspurwa.com/ || exit 1
        echo "Checking backend..."
        curl -f https://events-backend.fly.dev/ || exit 1
        echo "All services are healthy!"
    
    - name: Log Release Success
      run: |
        echo "üéâ Release deployed successfully!"
        echo "================================"
        echo "Tag: ${{ github.ref_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "SHA: ${{ github.sha }}"
        echo ""
        echo "Deployment URLs:"
        echo "- üåê Frontend: https://idabaguspurwa.com/"
        echo "- üîß Backend: https://events-backend.fly.dev/"
        echo "- üìä Performance: Check Lighthouse reports in artifacts"
        echo ""
        echo "All health checks passed ‚úÖ"